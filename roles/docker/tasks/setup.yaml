- name: set hostname
  hostname:
    name: '{{ hostname }}'
  when: hostname is defined and hostname

- name: disabled selinux
  selinux:
    state: disabled
  when: (ansible_distribution =="RedHat") or (ansible_distribution =="CentOS")

- name: disabled firewalld
  systemd:
    name: firewalld
    enabled: no
    state: stopped
  when: (ansible_distribution =="RedHat") or (ansible_distribution =="CentOS")

- name: add epel repo
  yum: name=epel-release state=latest update_cache=yes

- name: yum install compentents
  yum:
    update_cache: true
    state: present
    name: '{{ item }}'
  with_items:
  - chrony
  - ipvsadm
  when: (ansible_distribution =="RedHat") or (ansible_distribution =="CentOS")

- name: distribute chrony server config for Redhat/CentOS
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'templates/chrony/chrony-server.conf.j2', dest: '/etc/chrony.conf' }
  when:
  - inventory_hostname == ansible_play_batch[0]
  - ansible_distribution =="RedHat" or ansible_distribution =="CentOS"

- name: distribute chrony client config for Redhat/CentOS
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'templates/chrony/chrony-client.conf.j2', dest: '/etc/chrony.conf' }
  when:
  - inventory_hostname != ansible_play_batch[0]
  - ansible_distribution =="RedHat" or ansible_distribution =="CentOS"

- name: start chrony for Redhat/CentOS
  systemd:
    name: chronyd
    daemon_reload: true
    enabled: yes
    state: restarted
  when: ansible_distribution =="RedHat" or ansible_distribution =="CentOS"

- name: distribute ipvs bootload file
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'templates/ipvs.conf.j2', dest: '/etc/modules-load.d/ipvs.conf' }

- name: enable systemd-modules-load
  systemd: 
    name: systemd-modules-load 
    state: started 
    enabled: yes
