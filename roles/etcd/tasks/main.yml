- name: copy backup scripts
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0755
  with_items:
  - { src: 'file/backup-etcd-database-folder.sh', dest: '{{ DPATH }}/' }
  - { src: 'file/make-etcd-snapshot.sh', dest: '{{ DPATH }}/' }
  - { src: 'file/etcd-healthcheck.sh', dest: '{{ DPATH }}/' }

- name: make a snapshot for etcd cluster
  shell: ./make-etcd-snapshot.sh
  args:
    chdir: '{{ DPATH }}'
  when: (snapshot_etcd == true)

- name: stop etcd container
  shell: |
    docker stop etcd
  when: (backup_etcd_folder == true)

- name: backup etcd database folder
  shell: ./backup-etcd-database-folder.sh
  args:
    chdir: '{{ DPATH }}'
  when: (backup_etcd_folder == true)

- name: start etcd container
  shell: |
    docker start etcd
  when: (backup_etcd_folder == true)

- name: make etcd dir
  file:
    path: '{{ item }}'
    state: directory
    mode: 0755
  with_items:
    - '{{ DPATH }}'

- name: copy etcd image
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
    - { src: '{{ PKG_PATH }}/etcd.tar.bz2', dest: '{{ DPATH }}' }
  run_once: true

- name: load etcd image
  docker_image:
    load_path: '{{ DPATH }}/etcd.tar.bz2'
    name: etcd
    timeout: 600
  run_once: true

- name: docker login
  docker_login:
    registry: '{{ registry_endpoint }}'
    username: '{{ registry_user }}'
    password: '{{ registry_password }}'
    reauthorize: true
  run_once: true

- name: tag images
  docker_image:
    name: '{{ item.repo }}/{{ item.name }}'
    repository: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
  with_items:
    - { repo: 'k8s.gcr.io', name: 'etcd-amd64', tag: '{{ etcd_version }}' }
  run_once: true

- name: push images
  docker_image:
    name: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
    push: true
    state: present
  with_items:
    - { repo: 'k8s.gcr.io', name: 'etcd-amd64', tag: '{{ etcd_version }}' }
  run_once: true

- name: remove original images tag
  docker_image:
    state: absent
    name: '{{ item.repo }}/{{ item.name }}'
    tag: '{{ item.tag }}'
  with_items:
    - { repo: 'k8s.gcr.io', name: 'etcd-amd64', tag: '{{ etcd_version }}' }
  run_once: ture

- name: make etcd cert dir
  file:
    path: '/etc/etcd/pki'
    state: directory
    mode: 0755

- name: unarchive cfssl tool
  unarchive:
    src: '{{ PKG_PATH }}/cfssl-tools.tar.gz'
    dest: /usr/local/bin
  run_once: true

- name: copy certificates JSON files
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/ca-csr.json', dest: '{{ DPATH }}/' }
  - { src: 'file/ca-config.json', dest: '{{ DPATH }}/' }
  - { src: 'file/etcd-csr.json', dest: '{{ DPATH }}/' }
  run_once: true

- name: copy certificates generation scripts
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0755
  with_items:
  - { src: 'file/generate-etcd-certificates.sh', dest: '{{ DPATH }}/' }
  run_once: true

- name: generate etcd certificates
  raw: |
    /var/lib/kubeansible/etcd/generate-etcd-certificates.sh
  run_once: true

- name: fetch etcd certificates
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/etcd/pki/ca.pem', dest: 'file/ca.pem' }
  - { src: '/etc/etcd/pki/ca-key.pem', dest: 'file/ca-key.pem' }
  - { src: '/etc/etcd/pki/etcd.pem', dest: 'file/etcd.pem' }
  - { src: '/etc/etcd/pki/etcd-key.pem', dest: 'file/etcd-key.pem' }
  run_once: true

- name: copy certificates
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/ca.pem', dest: '/etc/etcd/pki/ca.pem' }
  - { src: 'file/ca-key.pem', dest: '/etc/etcd/pki/ca-key.pem' }
  - { src: 'file/etcd.pem', dest: '/etc/etcd/pki/etcd.pem' }
  - { src: 'file/etcd-key.pem', dest: '/etc/etcd/pki/etcd-key.pem' }

- name: run etcd
  docker_container:
    name: etcd
    network_mode: host
    restart_policy: unless-stopped
    image: "{{ registry_endpoint }}/{{ registry_project }}/etcd-amd64:{{ etcd_version }}"
    command: '{{ command }}'
    volumes:
      - "{{ etcd_data_path }}:/var/lib/etcd"
      - "/etc/etcd/pki:/etcd-cert"
