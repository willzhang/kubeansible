- name: copy k8s images
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: '{{ base_dir }}/image/k8s.tar.bz2', dest: '{{ dpath }}/kubernetes' }
  - { src: '{{ base_dir }}/image/flannel.tar.bz2', dest: '{{ dpath }}/kubernetes' }
  run_once: true

- name: copy calico folder
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: '{{ base_dir }}/image/calico', dest: '{{ dpath }}/' }
  run_once: true

- name: load k8s images
  docker_image:
    load_path: '{{ dpath }}/{{ item }}'
    name: k8s
    timeout: 600
  with_items:
  - kubernetes/k8s.tar.bz2
  - calico/images/calico-cni.tar.bz2
  - calico/images/calico-kube-controllers.tar.bz2
  - calico/images/calico-node.tar.bz2
  - calico/images/calico-typha.tar.bz2
  - calico/images/calico-pod2daemon-flexvol.tar.bz2
  - calico/images/calico-ctl.tar.bz2
  run_once: true

- name: docker login
  docker_login:
    registry: '{{ registry_endpoint }}'
    username: '{{ registry_user }}'
    password: '{{ registry_password }}'
    reauthorize: true
  run_once: true

- name: tag images
  docker_image:
    name: '{{ item.repo }}/{{ item.name }}'
    repository: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
  with_items:
  - { repo: '{{ kubernetes_repo }}', name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'pause', tag: '{{ pause_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'coredns', tag: '{{ dns_version }}' }
  - { repo: 'calico', name: 'cni', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'kube-controllers', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'node', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'typha', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'pod2daemon-flexvol', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'ctl', tag: '{{ calico_version }}' }
  run_once: true

- name: push images
  docker_image:
    name: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
    push: true
    state: present
  with_items:
  - { name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
  - { name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
  - { name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
  - { name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
  - { name: 'pause', tag: '{{ pause_version }}' }
  - { name: 'coredns', tag: '{{ dns_version }}' }
  - { name: 'cni', tag: '{{ calico_version }}' }
  - { name: 'kube-controllers', tag: '{{ calico_version }}' }
  - { name: 'node', tag: '{{ calico_version }}' }
  - { name: 'typha', tag: '{{ calico_version }}' }
  - { name: 'pod2daemon-flexvol', tag: '{{ calico_version }}' }
  - { name: 'ctl', tag: '{{ calico_version }}' }
  run_once: true

- name: Remove k8s.gcr.io and original images tag
  docker_image:
    state: absent
    name: '{{ item.repo }}/{{ item.name }}'
    tag: '{{ item.tag }}'
  with_items:
  - { repo: '{{ kubernetes_repo }}', name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'pause', tag: '{{ pause_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'coredns', tag: '{{ dns_version }}' }
  - { repo: 'calico', name: 'cni', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'kube-controllers', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'node', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'typha', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'pod2daemon-flexvol', tag: '{{ calico_version }}' }
  - { repo: 'calico', name: 'ctl', tag: '{{ calico_version }}' }
  run_once: ture

- name: install git command for helm-push and perl library for ipcalc
  yum:
    disablerepo: '*'
    enablerepo: wise2c
    update_cache: true
    state: present
    name: '{{ item }}'
  with_items:
  - git
  when: (ansible_distribution =="RedHat") or (ansible_distribution =="CentOS")

- name: generate kubeadm config and other yaml files
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'kubeadm.conf.j2', dest: '{{ dpath }}/kubernetes/kubeadm.conf' }
  - { src: 'kube-flannel.yml.j2', dest: '{{ dpath }}/kubernetes/kube-flannel.yml' }

- name: replace pod cidr 10.244.0.0/16 in kubeadm.conf files
  replace:
    dest: "{{ item.filename }}"
    regexp: "podSubnet: 10.244.0.0/16"
    replace: "podSubnet: {{ pod_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/kubernetes/kubeadm.conf" }

- name: replace ClusterCIDR 10.244.0.0/16 in kubeadm.conf files
  replace:
    dest: "{{ item.filename }}"
    regexp: "clusterCIDR: 10.244.0.0/16"
    replace: "clusterCIDR: {{ cluster_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/kubernetes/kubeadm.conf" }

- name: replace serviceSubnet 10.96.0.0/12 in kubeadm.conf files
  replace:
    dest: "{{ item.filename }}"
    regexp: "serviceSubnet: 10.96.0.0/12"
    replace: "serviceSubnet: {{ service_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/kubernetes/kubeadm.conf" }

- name: copy certificates JSON files
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'ca-csr.json', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'ca-config.json', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'apiserver-csr.json', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'kubelet-csr.json', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'front-proxy-ca-csr.json', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'front-proxy-client-csr.json', dest: '{{ dpath }}/kubernetes/' }

- name: copy certificates generation scripts
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0755
  with_items:
  - { src: 'generate-other-certificates.sh', dest: '{{ dpath }}/kubernetes/' }
  - { src: 'generate-apiserver-certificate.sh', dest: '{{ dpath }}/kubernetes/' }

- name: copy service_cidr.txt
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'service_cidr.txt.j2', dest: '{{ dpath }}/kubernetes/service_cidr.txt' }

- name: unarchive ipcalc tool
  unarchive:
    src: '{{ base_dir }}/ipcalc-0.41.tar.gz'
    dest: /usr/local/bin

- name: make a link for ipcalc
  shell: |
    rm -f /usr/local/bin/ipcalc
    ln -s /usr/local/bin/ipcalc-0.41/ipcalc /usr/local/bin/ipcalc

- name: generate other certificates
  shell: |
    /var/lib/kubeansible/kubernetes/generate-other-certificates.sh
  args:
    chdir: '{{ dpath }}'
  run_once: true

- name: fetch certificates
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/kubernetes/pki/ca.crt', dest: 'file/ca.crt' }
  - { src: '/etc/kubernetes/pki/ca.key', dest: 'file/ca.key' }
  - { src: '/etc/kubernetes/pki/apiserver-kubelet-client.crt', dest: 'file/apiserver-kubelet-client.crt' }
  - { src: '/etc/kubernetes/pki/apiserver-kubelet-client.key', dest: 'file/apiserver-kubelet-client.key' }
  - { src: '/etc/kubernetes/pki/front-proxy-ca.crt', dest: 'file/front-proxy-ca.crt' }
  - { src: '/etc/kubernetes/pki/front-proxy-ca.key', dest: 'file/front-proxy-ca.key' }
  - { src: '/etc/kubernetes/pki/front-proxy-client.crt', dest: 'file/front-proxy-client.crt' }
  - { src: '/etc/kubernetes/pki/front-proxy-client.key', dest: 'file/front-proxy-client.key' }
  - { src: '/etc/kubernetes/pki/sa.pub', dest: 'file/sa.pub' }
  - { src: '/etc/kubernetes/pki/sa.key', dest: 'file/sa.key' }
  run_once: true

- name: copy certificates
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/ca.crt', dest: '/etc/kubernetes/pki/ca.crt' }
  - { src: 'file/ca.key', dest: '/etc/kubernetes/pki/ca.key' }
  - { src: 'file/apiserver-kubelet-client.crt', dest: '/etc/kubernetes/pki/apiserver-kubelet-client.crt' }
  - { src: 'file/apiserver-kubelet-client.key', dest: '/etc/kubernetes/pki/apiserver-kubelet-client.key' }
  - { src: 'file/front-proxy-ca.crt', dest: '/etc/kubernetes/pki/front-proxy-ca.crt' }
  - { src: 'file/front-proxy-ca.key', dest: '/etc/kubernetes/pki/front-proxy-ca.key' }
  - { src: 'file/front-proxy-client.crt', dest: '/etc/kubernetes/pki/front-proxy-client.crt' }
  - { src: 'file/front-proxy-client.key', dest: '/etc/kubernetes/pki/front-proxy-client.key' }
  - { src: 'file/sa.pub', dest: '/etc/kubernetes/pki/sa.pub' }
  - { src: 'file/sa.key', dest: '/etc/kubernetes/pki/sa.key' }

- name: generate kube-apiserver certificate
  shell: |
    /var/lib/kubeansible/kubernetes/generate-apiserver-certificate.sh
  args:
    chdir: '{{ dpath }}'

- name: copy kubeadm-token.sh and update-api-advertise-address.sh
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0755
  with_items:
  - { src: 'file/kubeadm-token.sh', dest: '{{ dpath }}/' }
  - { src: 'file/update-api-advertise-address.sh', dest: '{{ dpath }}/' }

- name: kubeadm token generate
  shell: ./kubeadm-token.sh
  args:
    chdir: '{{ dpath }}'
  run_once: true

- name: fetch kubeadm.conf
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '{{ dpath }}/kubeadm.conf', dest: 'templates/kubeadm.conf' }
  run_once: true

- name: copy kubeadm.conf
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'templates/kubeadm.conf', dest: '{{ dpath }}/' }

- name: update apiserver advertise address.sh
  shell: ./update-api-advertise-address.sh
  args:
    chdir: '{{ dpath }}'

- name: kubeadm init
  shell: |
    kubeadm init --config {{ dpath }}/kubeadm.conf

- name: fetch admin.conf
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/kubernetes/admin.conf', dest: 'file/admin.conf' }
  run_once: true

- name: config kubectl
  shell: |
    cp /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

- name: fix the bug of flannel issues-1178
  replace:
    dest: "{{ item.filename }}"
    regexp: '"name": "cbr0",'
    replace: '"name": "cbr0",\n      "cniVersion":"0.3.1",'
  with_items:
  - { filename: '{{ dpath }}/kube-flannel.yml' }
  run_once: true

- name: apply flannel cni
  shell: |
    kubectl apply -f {{ dpath }}/kube-flannel.yml
  run_once: true
  when: cni == 'Flannel'

- name: replace image repo in calico yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "image: calico/"
    replace: "image: {{ registry_endpoint }}/{{ registry_project }}/"
  with_items:
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico.yaml" }
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico-typha.yaml" }
    - { filename: "{{ dpath }}/calico/k8s-manifests/canal.yaml" }
    - { filename: "{{ dpath }}/calico/k8s-manifests/calicoctl.yaml" }
  run_once: true

- name: replace image repo in canal yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "image: quay.io/coreos/flannel:{{ flannel_version_short }}"
    replace: "image: {{ registry_endpoint }}/{{ registry_project }}/flannel:{{ flannel_version }}"
  with_items:
    - { filename: "{{ dpath }}/calico/k8s-manifests/canal.yaml" }
  run_once: true

- name: replace pod cidr in calico yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "192.168.0.0/16"
    replace: "{{ pod_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico.yaml" }
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico-typha.yaml" }
  run_once: true

- name: replace pod cidr 10.244.0.0/16 in canal yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "10.244.0.0/16"
    replace: "{{ pod_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/calico/k8s-manifests/canal.yaml" }
  run_once: true

- name: replace calico_mode in calico yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "value: \"Always\""
    replace: "value: \"Never\""
  with_items:
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico.yaml" }
    - { filename: "{{ dpath }}/calico/k8s-manifests/calico-typha.yaml" }
  when: calico_mode == 'BGP'
  run_once: true

- name: add calico_node_ip_detection_mode in calico yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: '- name: FELIX_HEALTHENABLED[\S\s]*?value: "true"'
    replace: '- name: FELIX_HEALTHENABLED\n              value: "true"\n            - name: IP_AUTODETECTION_METHOD\n              value: {{ calico_node_ip_detection_mode }}'
  with_items:
  - { filename: '{{ dpath }}/calico/k8s-manifests/calico.yaml' }
  - { filename: '{{ dpath }}/calico/k8s-manifests/calico-typha.yaml' }
  run_once: true

- name: replace pod cidr 10.244.0.0/16 in flannel yaml files
  replace:
    dest: "{{ item.filename }}"
    regexp: "10.244.0.0/16"
    replace: "{{ pod_cidr }}"
  with_items:
    - { filename: "{{ dpath }}/kube-flannel.yml" }
  run_once: true

- name: apply calico cni for cluster with more than 50 nodes
  shell: |
    kubectl apply -f {{ dpath }}/calico/k8s-manifests/calico-typha.yaml
    kubectl apply -f {{ dpath }}/calico/k8s-manifests/calicoctl.yaml
  run_once: true
  when: (cni == 'Calico') and (calico_nodes == 'More_than_50_nodes')

- name: apply calico cni for cluster with 50 nodes or less
  shell: |
    kubectl apply -f {{ dpath }}/calico/k8s-manifests/calico.yaml
    kubectl apply -f {{ dpath }}/calico/k8s-manifests/calicoctl.yaml
  run_once: true
  when: (cni == 'Calico') and (calico_nodes == '50_nodes_or_less')

- name: update kube-proxy HA setting
  shell: |
    kubectl -n kube-system get cm kube-proxy -o yaml > {{ dpath }}/kube-proxy-cm.yaml
    sed -i "s#.*server:.*#        server: https://{{ endpoint }}#g" {{ dpath }}/kube-proxy-cm.yaml
    kubectl -n kube-system apply -f {{ dpath }}/kube-proxy-cm.yaml
  run_once: true

- name: execute prometheus-fix-master-nodes script for Redhat/CentOS
  shell: ./prometheus-fix-master-nodes.sh
  args:
    chdir: '{{ dpath }}'
  when: (ansible_distribution =="RedHat") or (ansible_distribution =="CentOS")

- name: scale calico-typha replicas
  shell: |
    kubectl -n kube-system scale deployment calico-typha --replicas={{ calico_typha_replicas }}
  run_once: true
  when: (cni == 'Calico') and (calico_nodes == 'More_than_50_nodes')
  
  
- name: fetch admin.conf
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/kubernetes/admin.conf', dest: 'file/admin.conf' }
  run_once: true
