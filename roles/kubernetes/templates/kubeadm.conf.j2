apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ bootstrap_token.stdout }}
  ttl: 0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ hostvars[inventory_hostname].ansible_ssh_host }}
  bindPort: 6443
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master

---
apiServer:
  certSANs:
  - {{ endpoint.split(':')[0] }}
  extraArgs:
    apiserver-count: "3"
    feature-gates: LocalStorageCapacityIsolation=true
    runtime-config: batch/v2alpha1=true
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controlPlaneEndpoint: {{ endpoint }}
controllerManager:
  extraArgs:
    feature-gates: LocalStorageCapacityIsolation=true
dns:
  type: CoreDNS
etcd:
  external:
    caFile: /etc/etcd/pki/ca.pem
    certFile: /etc/etcd/pki/etcd.pem
    keyFile: /etc/etcd/pki/etcd-key.pem
    endpoints:
{% for host in groups['etcd'] %}
    - https://{{ hostvars[host].ansible_ssh_host }}:2379
{% endfor %}
imageRepository: {{ registry_endpoint }}/{{ registry_project }}
kind: ClusterConfiguration
kubernetesVersion: {{ kubernetes_version }}
networking:
  dnsDomain: cluster.local
  podSubnet: {{ pod_cird }}
  serviceSubnet: {{ service_cird }}
scheduler:
  extraArgs:
    feature-gates: LocalStorageCapacityIsolation=true

---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "{{ cluster_cird }}"
bindAddress: 0.0.0.0
featureGates:
  SupportIPVSProxyMode: true
mode: ipvs
